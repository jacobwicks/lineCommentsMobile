import { animatedCloseComment } from './animatedCloseComment.js';
import { getLineNumber } from './getLineNumber.js';

//fills in the comment with a contents div and a label
export const setCommentContent = ({
    blockComments,
    comment,
    commentIndex,
    isMobile,
}) => {
    const lineNumber = getLineNumber(comment);
    //this comment gets the comment container style applied
    comment.classList.add('line_comment_container');

    //comment.innerHTML contains the markup generated by jekyll
    //usually, the content is inside a paragraph element <p>
    //but if the user tabbed the content over, Jekyll will highlight it in a code block
    //and it won't be in a <p> element
    const isParagraph =
        comment.children && comment.children[0].nodeName === 'P';

    //trim the whitespace
    const trimmed = comment.innerHTML.trim();
    //cut the <p> and </p> tags off the content
    const content = isParagraph
        ? ` ${trimmed.slice(3, trimmed.length - 4)}`
        : trimmed;
    //clear comment element
    comment.textContent = null;

    //create the content div
    const contentDiv = document.createElement('div');
    //the class is line_comment_content
    //which is max_height of 3 lines when collapsed
    contentDiv.classList.add('line_comment_content');

    contentDiv.innerHTML = content;

    //add a label span to the content
    const labelSpan = document.createElement('span');
    labelSpan.classList.add('line_label');
    labelSpan.innerText = `Line: ${lineNumber}`;

    //add the label span before the text content
    contentDiv.prepend(labelSpan);

    //calculate the line number of the next comment
    const nextCommentLineNumber =
        blockComments[commentIndex + 1] &&
        getLineNumber(blockComments[commentIndex + 1]);

    if (isMobile) {
        //comment background color is lighter
        comment.classList.add('mobile');

        //labelSpan gets different highlighting
        labelSpan.classList.add('mobile');

        //add event listener to close the comment on click of the comment content label
        labelSpan.addEventListener('click', () =>
            animatedCloseComment(comment)
        );

        const postWidth = document.querySelector('.post-content, .e-content')
            .offsetWidth;
        //set the content width smaller
        contentDiv.style.width = `${postWidth - 20}px`;
    } else if (
        //if not on mobile, multiple comments display at once and may overlap
        nextCommentLineNumber !== undefined &&
        nextCommentLineNumber - lineNumber < 4
    ) {
        //make the comment container single height
        comment.classList.add('single_height');
        //content classList also has single height
        contentDiv.classList.add('single_height');
    }

    comment.appendChild(contentDiv);
};
